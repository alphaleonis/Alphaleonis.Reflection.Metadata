{
  "api/Alphaleonis.Reflection.Metadata.AssemblyInfo.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.AssemblyInfo.html",
    "title": "Class AssemblyInfo | Alphaleonis.Reflection.Metadata",
    "keywords": "Class AssemblyInfo Represents basic information about a PE file representing an assembly. Inheritance Object AssemblyInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Reflection.Metadata Assembly : Alphaleonis.Reflection.Metadata.dll Syntax public sealed class AssemblyInfo Remarks The information provided by this class is usually retrieved using ReflectionOnlyLoad(String) and then examining the returned Assembly object. This however has the drawback that it is not possible to unload the assembly without performing the operation in a separate AppDomain . This class retrieves basic information about the assembly only, via the provided in , so the targetted assembly is not loaded into the AppDomain as is the case with Assembly.Load and Assembly.ReflectionOnlyLoad methods. Properties | Improve this Doc View Source AssemblyName Gets the name of the assembly. Declaration public AssemblyName AssemblyName { get; } Property Value Type Description AssemblyName The name of the assembly or null if the file was not an assembly. | Improve this Doc View Source AssemblyReferences Gets references of the assembly. Declaration public IReadOnlyList<AssemblyName> AssemblyReferences { get; } Property Value Type Description IReadOnlyList < AssemblyName > The assembly references. | Improve this Doc View Source IsAssembly Gets a value indicating whether the parsed file was indeed an assembly or not. Declaration public bool IsAssembly { get; } Property Value Type Description Boolean true if the file was a valid assembly or false otherwise. | Improve this Doc View Source IsConsoleApplication Gets a value indicating whether the PE file is a console application. Declaration public bool IsConsoleApplication { get; } Property Value Type Description Boolean true if the PE file is a console application, false if not. | Improve this Doc View Source IsDll Gets a value indicating whether the PE file is a DLL. Declaration public bool IsDll { get; } Property Value Type Description Boolean true if the PE file is a DLL, false if not. | Improve this Doc View Source IsExe Gets a value indicating whether the PE file is an executable. Declaration public bool IsExe { get; } Property Value Type Description Boolean true if the PE file is an executable, false if not. | Improve this Doc View Source MetadataVersion Gets the metadata version as specified in the assembly metadata. Declaration public string MetadataVersion { get; } Property Value Type Description String The metadata version from the assembly metadata. | Improve this Doc View Source TargetFramework Gets target framework as provided by the TargetFrameworkAttribute . Declaration public FrameworkName TargetFramework { get; } Property Value Type Description FrameworkName The target framework for which the assembly was built, or null if the information was not available. Remarks This is only available if the assembly was build against .NET 4.0 or later. In previous versions of the .NET framework, this attribute was not available, and the correct target framework cannot be determined by inspecting the assembly metadata. Methods | Improve this Doc View Source GetAssemblyInfo(Byte[]) Gets assembly information from the specified assembly. Declaration public static AssemblyInfo GetAssemblyInfo(byte[] rawAssembly) Parameters Type Name Description Byte [] rawAssembly A byte array that is a COFF-based image containing an emitted assembly. Returns Type Description AssemblyInfo The assembly information read. Remarks This method does not throw an exception if the file is not an assembly. Instead the properties of the returned object must be inspected to determine whether it was a valid PE file and/or assembly. | Improve this Doc View Source GetAssemblyInfo(String) Gets assembly information from the specified file. Declaration public static AssemblyInfo GetAssemblyInfo(string fileName) Parameters Type Name Description String fileName The full path to the assembly file to retrieve metadata information from. Returns Type Description AssemblyInfo The assembly information read. Remarks This method does not throw an exception if the file is not an assembly. Instead the properties of the returned object must be inspected to determine whether it was a valid PE file and/or assembly."
  },
  "documentation/intro.html": {
    "href": "documentation/intro.html",
    "title": "Introduction | Alphaleonis.Reflection.Metadata",
    "keywords": "Introduction Alphaleonis.Reflection.Metadata is a small library providing some utilities for inspecting basic assembly metadata."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Alphaleonis.Reflection.Metadata",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image. There is something TypeNameParserException"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Alphaleonis.Reflection.Metadata",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/Alphaleonis.Reflection.Metadata.TypeSpecifierKind.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.TypeSpecifierKind.html",
    "title": "Enum TypeSpecifierKind | Alphaleonis.Reflection.Metadata",
    "keywords": "Enum TypeSpecifierKind Values that represent the type of a TypeSpecifier Namespace : Alphaleonis.Reflection.Metadata Assembly : Alphaleonis.Reflection.Metadata.dll Syntax public enum TypeSpecifierKind Fields Name Description Array Indicates an array specifier, e.g. ([], [,,]). Pointer Indicates a pointer specifier (*) Reference Indicates a reference specifier (&)."
  },
  "api/Alphaleonis.Reflection.Metadata.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.html",
    "title": "Alphaleonis.Reflection.Metadata | Alphaleonis.Reflection.Metadata",
    "keywords": "Alphaleonis.Reflection.Metadata This is some conceptual information. Classes AssemblyInfo Represents basic information about a PE file representing an assembly. MetadataReaderExtensions Provides some useful extension methods to . StrongNameKeyPairGenerator Utility class that can be used to generate a strong name key pair (.snk) usable for signing an assembly. TypeIdentifier Representation of a .NET type name, allowing access to the individual parts of the type name, both for reading and for modification. TypeNameParserException Exception thrown when an invalid type name is parsed by a TypeIdentifier Structs TypeSpecifier Description of a type specifier, that indicates whether a type is an array, pointer or reference. Enums TypeSpecifierKind Values that represent the type of a TypeSpecifier"
  },
  "api/Alphaleonis.Reflection.Metadata.TypeNameParserException.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.TypeNameParserException.html",
    "title": "Class TypeNameParserException | Alphaleonis.Reflection.Metadata",
    "keywords": "Class TypeNameParserException Exception thrown when an invalid type name is parsed by a TypeIdentifier Inheritance Object Exception TypeNameParserException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Reflection.Metadata Assembly : Alphaleonis.Reflection.Metadata.dll Syntax [Serializable] public class TypeNameParserException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source TypeNameParserException() Default constructor. Declaration public TypeNameParserException() | Improve this Doc View Source TypeNameParserException(SerializationInfo, StreamingContext) Specialised constructor for use only by derived class. Declaration protected TypeNameParserException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The information. StreamingContext context The context. | Improve this Doc View Source TypeNameParserException(String) Constructor. Declaration public TypeNameParserException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source TypeNameParserException(String, Exception) Constructor. Declaration public TypeNameParserException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception or null . Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Reflection.Metadata.MetadataReaderExtensions.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.MetadataReaderExtensions.html",
    "title": "Class MetadataReaderExtensions | Alphaleonis.Reflection.Metadata",
    "keywords": "Class MetadataReaderExtensions Provides some useful extension methods to . Inheritance Object MetadataReaderExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Reflection.Metadata Assembly : Alphaleonis.Reflection.Metadata.dll Syntax public static class MetadataReaderExtensions Methods | Improve this Doc View Source ParseAssemblyName(MetadataReader, AssemblyDefinition) Gets the AssemblyName of the given . Declaration public static AssemblyName ParseAssemblyName(this MetadataReader metadataReader, AssemblyDefinition assemblyDefinition) Parameters Type Name Description MetadataReader metadataReader The to act on. AssemblyDefinition assemblyDefinition The assembly definition. Returns Type Description AssemblyName An AssemblyName representing the specified assemblyDefinition . Remarks This is similar to the AssemblyDefinition.GetAssemblyName from System.Reflection.Metadata , with the difference that this method will give set culture to neutral and the public key token to null instead of leaving them empty. | Improve this Doc View Source ParseAssemblyName(MetadataReader, AssemblyReference) Gets the AssemblyName of the given . Declaration public static AssemblyName ParseAssemblyName(this MetadataReader metadataReader, AssemblyReference assemblyReference) Parameters Type Name Description MetadataReader metadataReader The to act on. AssemblyReference assemblyReference The assembly reference. Returns Type Description AssemblyName An AssemblyName representing the specified assemblyReference . Remarks This is similar to the AssemblyDefinition.GetAssemblyName from System.Reflection.Metadata , with the difference that this method will give set culture to neutral and the public key token to null instead of leaving them empty."
  },
  "api/Alphaleonis.Reflection.Metadata.TypeIdentifier.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.TypeIdentifier.html",
    "title": "Class TypeIdentifier | Alphaleonis.Reflection.Metadata",
    "keywords": "Class TypeIdentifier Representation of a .NET type name, allowing access to the individual parts of the type name, both for reading and for modification. Inheritance Object TypeIdentifier Implements IEquatable < TypeIdentifier > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Reflection.Metadata Assembly : Alphaleonis.Reflection.Metadata.dll Syntax [Serializable] public class TypeIdentifier : IEquatable<TypeIdentifier> Remarks Use Parse(String) to create a new instance of a TypeIdentifier Properties | Improve this Doc View Source AssemblyName Gets or sets the assembly name in which this type resides. This may be null if no assembly name was provided. Declaration public AssemblyName AssemblyName { get; set; } Property Value Type Description AssemblyName | Improve this Doc View Source AssemblyQualifiedName Gets or sets the full assembly qualified name of the type. Declaration public string AssemblyQualifiedName { get; set; } Property Value Type Description String Exceptions Type Condition ArgumentNullException Thrown when one or more required arguments are null. ArgumentException Thrown when one or more arguments have unsupported or illegal values. | Improve this Doc View Source FullName Gets or sets the full name of the type. This is equivalent to FullName . Declaration public string FullName { get; set; } Property Value Type Description String Exceptions Type Condition ArgumentNullException Thrown when one or more required arguments are null. ArgumentException Thrown when one or more arguments have unsupported or illegal values. | Improve this Doc View Source GenericArguments Gets a list containing the generic arguments of this type, or an empty list if no generic arguments are available. Declaration public IList<TypeIdentifier> GenericArguments { get; } Property Value Type Description IList < TypeIdentifier > | Improve this Doc View Source IsArray Returns true if this type is an array. Declaration public bool IsArray { get; } Property Value Type Description Boolean | Improve this Doc View Source IsPointer Returns true if this type is a pointer. Declaration public bool IsPointer { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReference Returns true if this type is a reference. Declaration public bool IsReference { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets or sets the simple name of the type without any array/pointer/byref specs. Declaration public string Name { get; set; } Property Value Type Description String The name. Remarks This is different from Name that does include the array/pointer/byRef specifiers. Exceptions Type Condition ArgumentNullException Thrown when one or more required arguments are null. ArgumentException Thrown when one or more arguments have unsupported or illegal values. | Improve this Doc View Source Namespace Gets or sets the namespace of the type. May be null if the type is not contained within a namespace. Declaration public string Namespace { get; set; } Property Value Type Description String | Improve this Doc View Source NamespaceTypeName Gets or sets the namespace and type name, without any array/pointer/reference specifiers or generic arguments. For example the NamespaceTypeName of the type System.Collections.Generic.Dictionary 2+KeyCollection[System.String,System.Int32][,]</code> is <code>System.Collections.Generic.Dictionary 2+KeyCollection . Declaration public string NamespaceTypeName { get; set; } Property Value Type Description String The name of the namespace type. Exceptions Type Condition ArgumentNullException Thrown when one or more required arguments are null. ArgumentException Thrown when one or more arguments have unsupported or illegal values. | Improve this Doc View Source TypeSpecifiers Gets or sets the specifiers indicating whether this type is an array, pointer or reference type. Declaration public IList<TypeSpecifier> TypeSpecifiers { get; } Property Value Type Description IList < TypeSpecifier > Methods | Improve this Doc View Source Equals(TypeIdentifier) Tests if this TypeIdentifier is considered equal to another. Declaration public bool Equals(TypeIdentifier other) Parameters Type Name Description TypeIdentifier other The type identifier to compare to this object. Returns Type Description Boolean True if the objects are considered equal, false if they are not. | Improve this Doc View Source Equals(Object) Tests if this object is considered equal to another. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to this object. Returns Type Description Boolean True if the objects are considered equal, false if they are not. Overrides Object.Equals(Object) | Improve this Doc View Source GetDeclaringType() Gets declaring type of this type if this type is a nested type, or returns null otherwise. Declaration public TypeIdentifier GetDeclaringType() Returns Type Description TypeIdentifier | Improve this Doc View Source GetElementType() Gets element type of this type if this type is an array, pointer or reference. Returns null otherwise. Declaration public TypeIdentifier GetElementType() Returns Type Description TypeIdentifier | Improve this Doc View Source GetHashCode() Calculates a hash code for this object. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for this object. Overrides Object.GetHashCode() | Improve this Doc View Source Parse(String) Parses a type name. This may be an assembly qualified name, a full type name or a simple type name. Declaration public static TypeIdentifier Parse(string typeName) Parameters Type Name Description String typeName The type name to parse Returns Type Description TypeIdentifier A new TypeIdentifier representing the specified type. Exceptions Type Condition ArgumentNullException Thrown when one or more required arguments are null. ArgumentException Thrown when one or more arguments have unsupported or illegal values. | Improve this Doc View Source ToString() Convert this object into a string representation. Declaration public override string ToString() Returns Type Description String A string that represents this object. Overrides Object.ToString() Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Reflection.Metadata.TypeSpecifier.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.TypeSpecifier.html",
    "title": "Struct TypeSpecifier | Alphaleonis.Reflection.Metadata",
    "keywords": "Struct TypeSpecifier Description of a type specifier, that indicates whether a type is an array, pointer or reference. Implements IEquatable < TypeSpecifier > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Alphaleonis.Reflection.Metadata Assembly : Alphaleonis.Reflection.Metadata.dll Syntax public struct TypeSpecifier : IEquatable<TypeSpecifier> Fields | Improve this Doc View Source Pointer Indicates a pointer specifier in a type name, i.e. '*'. Declaration public static readonly TypeSpecifier Pointer Field Value Type Description TypeSpecifier | Improve this Doc View Source Reference Indicates a reference specifier in a type name, i.e. '&'. Declaration public static readonly TypeSpecifier Reference Field Value Type Description TypeSpecifier Properties | Improve this Doc View Source ArrayRank Gets the array rank if this indicates an array, or 0 otherwise. Declaration public int ArrayRank { get; } Property Value Type Description Int32 The array rank. | Improve this Doc View Source Kind Gets the type of this specifier. Declaration public TypeSpecifierKind Kind { get; } Property Value Type Description TypeSpecifierKind Methods | Improve this Doc View Source Array(Int32) Indicates an array specifier in a type name, i.e. '[]', or '[,,]' etc. Declaration public static TypeSpecifier Array(int rank) Parameters Type Name Description Int32 rank The rank of the array. Must be greater than 0. Returns Type Description TypeSpecifier | Improve this Doc View Source Equals(TypeSpecifier) Tests if this TypeSpecifier is considered equal to another. Declaration public bool Equals(TypeSpecifier other) Parameters Type Name Description TypeSpecifier other The type specifier to compare to this object. Returns Type Description Boolean True if the objects are considered equal, false if they are not. | Improve this Doc View Source Equals(Object) Tests if this object is considered equal to another. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to this object. Returns Type Description Boolean True if the objects are considered equal, false if they are not. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Calculates a hash code for this object. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for this object. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Convert this object into a string representation. Declaration public override string ToString() Returns Type Description String A string that represents this object. Overrides ValueType.ToString() Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Reflection.Metadata.StrongNameKeyPairGenerator.html": {
    "href": "api/Alphaleonis.Reflection.Metadata.StrongNameKeyPairGenerator.html",
    "title": "Class StrongNameKeyPairGenerator | Alphaleonis.Reflection.Metadata",
    "keywords": "Class StrongNameKeyPairGenerator Utility class that can be used to generate a strong name key pair (.snk) usable for signing an assembly. Inheritance Object StrongNameKeyPairGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Reflection.Metadata Assembly : Alphaleonis.Reflection.Metadata.dll Syntax public static class StrongNameKeyPairGenerator Methods | Improve this Doc View Source CreateStrongNameKeyFile(String, Int32) Creates strong name key pair. Declaration public static void CreateStrongNameKeyFile(string filePath, int keySize = 1024) Parameters Type Name Description String filePath Full path to the file to write the strong name key pair to. Int32 keySize (Optional) The key size. Must be between 384 and 16384 and be a multiple of 8. The default is 1024. Exceptions Type Condition ArgumentException Thrown when one or more arguments have unsupported or illegal values. | Improve this Doc View Source CreateStrongNameKeyPair(Int32) Creates strong name key pair. Declaration public static byte[] CreateStrongNameKeyPair(int keySize = 1024) Parameters Type Name Description Int32 keySize The key size. Must be between 384 and 16384 and be a multiple of 8. The default is 1024. Returns Type Description Byte [] A new array containing the strong name key pair. Exceptions Type Condition ArgumentException Thrown when one or more arguments have unsupported or illegal values."
  }
}